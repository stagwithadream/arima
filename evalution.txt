import pandas as pd
from datetime import datetime
from math import sqrt
from sklearn.metrics import r2_score
import warnings
from pandas import read_csv
from pandas import datetime
from statsmodels.tsa.arima_model import ARIMA
from sklearn.metrics import mean_squared_error
from sklearn.metrics import median_absolute_error
from sklearn.metrics import mean_squared_log_error

from sklearn.metrics import explained_variance_score

from sklearn.metrics import mean_absolute_error
dataset=pd.read_csv("C:\\Users\Sairam Reddy\Desktop\ARIMA\scrapped datasets\completeValues\hyd_So2_pollution_data_completeValues.csv")
#print(dataset)
dataset['Date']=pd.to_datetime(dataset['Date'],infer_datetime_format=True)
#print(dataset.values)
series=dataset.set_index(['Date'])    
df=series.copy()
print(series.values)

# evaluate an ARIMA model for a given order (p,d,q)
def evaluate_arima_model(X, arima_order):
    # prepare training dataset
    train_size = int(len(X) * 0.66)
    train, test = X[0:train_size], X[train_size:]
    history = [x for x in train]
    # make predictions
    predictions = list()
    for t in range(len(test)):
        model = ARIMA(history, order=arima_order)
        model_fit = model.fit(disp=0)
        yhat = model_fit.forecast()[0]
        predictions.append(yhat)
        history.append(test[t])
    # calculate out of sample error
    error=[]
    error.append(("MSE: ",mean_squared_error(test, predictions)))
    error.append(("MASE : ",mean_absolute_error(test, predictions)))
    error.append(("RMSE : ",sqrt(mean_absolute_error(test, predictions))))
    error.append(("MAPE  :",mean_absolute_percentage_error(test,predictions)))
    error.append(("Median Aabsolute Error :",median_absolute_error(test,predictions)))
    error.append(("Explained Variance score :",explained_variance_score(test,predictions)))#EXPLAINED VARIANCE SCORE
    error.append(("r2 score :",r2_score(test,predictions)))#R2 SCORE FUCNTION DETERMINATION SCORE
    error.append(("MLSE (mean squared log error):",mean_squared_log_error(test,predictions)))
    
    return error

from sklearn.utils.validation import check_array
import numpy as np
def mean_absolute_percentage_error(y_true, y_pred): 
    """
    Use of this metric is not recommended; for illustration only. 
    See other regression metrics on sklearn docs:
      http://scikit-learn.org/stable/modules/classes.html#regression-metrics
    Use like any other metric
    >>> y_true = [3, -0.5, 2, 7]; y_pred = [2.5, -0.3, 2, 8]
    >>> mean_absolute_percentage_error(y_true, y_pred)
    Out[]: 24.791666666666668
    """

    y_true, y_pred = np.array(y_true), np.array(y_pred)

    ## Note: does not handle mix 1d representation
    #if _is_1d(y_true): 
    #    y_true, y_pred = _check_1d_array(y_true, y_pred)

    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100


evaluate_arima_model(series.values,(0,0,1))